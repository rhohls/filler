/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fil_add_heat.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/14 08:26:35 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 08:13:57 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../filler.h"

/*
** from top left of square add "heat units" in square shape
*/

void apply_heat(int *start, int grd_size, int heat, t_fill *game)
{
	int row;
	int col;

	row = 0;
	while (row < grd_size)
	{
		col = 0;
		while (col < grd_size)
		{
			if (in_board(ROW(start) + row, COL(start) + col, game))
				game->heat_map[ROW(start) + row][COL(start) + col] += heat;
			col++;
		}
		row ++;
	}	
}

void add_heat(int *pos, t_fill *game, int mult)
{
	int grd_size;
	int loop;
	int heat;

	grd_size = 7;
	loop = 3;
	heat = 1;
	
	if (in_board(ROW(pos), COL(pos), game))
		game->heat_map[ROW(pos)][COL(pos)] += 4 * mult;
	else
		return ;
	while (loop > 0)
	{
		apply_heat(pos, grd_size, heat * mult, game);
		grd_size -= 2;
		loop--;
		heat++;
	}
}



	






/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   gen_stuff.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/18 14:33:00 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 14:55:52 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../filler.h"
// add protection -- run in while loop till malloc returns

void	gen_heatmap(t_fill *game)
{	
	game->heat_map = (int **)malloc(sizeof(int *) * game->ROW(m_size));
	int	count = 0;
	while (count < game->ROW(m_size))
	{
		game->heat_map[count] = (int *)malloc(sizeof(int) * game->COL(m_size));
		count++;
	}
}


//DOUBLE CHECK THIS SHIT !
//row vs col from input
//add to ma check with needing to malloc vs assign

void	gen_map(t_fill *game)
{	
	game->map = (char **)malloc(sizeof(char *) * game->ROW(m_size));
/*	int	count = 0;
	while (count < game->ROW(m_size))
	{
		game->map[count] = (char *)malloc(sizeof(char) * game->COL(m_size));
		count++;
	}*/
}

void	gen_piece(t_fill *game)
{	
	game->piece = (char **)malloc(sizeof(char *) * game->ROW(p_size));
/*	int	count = 0;
	while (count < game->ROW(p_size))
	{
		game->piece[count] = (char *)malloc(sizeof(char) * game->COL(p_size));
		count++;
	} */
}

void	get_piece(t_fill *game, char *line, int fd)
{
	int	i;

	i = 0;
	gen_piece(game);

	game->piece[i] = line;
	i++;
	while (i <= game->ROW(p_size) && get_next_line(fd, &line))
	{
		game->piece[i] = line;
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   in_board.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/16 11:23:59 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 08:12:05 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "filler.h"

int in_board(int row, int col, t_fill *game)
{
	if (row < 0 || col < 0)
		return (0);
	else if (row > game->ROW(m_size) || col < game->COL(m_size))
		return (0);
	else
		return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   piece_cent.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/16 11:00:39 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 08:15:13 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../filler.h"

void piece_cent(t_fill *game)
{
	return;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   placement.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/19 07:03:31 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 18:00:33 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "filler.h"
#include <stdio.h>
/*
void	place_piece(t_fill *game)
{
	ft_putnbr(ROW(game->place));
	ft_putchar(' ');
	ft_putnbr(COL(game->place));
	ft_putchar('\n');
}
*/
void	place_piece(t_fill *game)
{
	printf("%i %i\n", ROW(game->place), COL(game->place));
}
/*
** -1 for row and col if no valid move
*/
void decide(t_fill *game)
{
	int row;
	int col;

	row = 0;

	while (row < game->ROW(m_size))
	{
		col = 0;
		while (col < game->COL(m_size))
		{
			if (valid_move_static(game, row, col))
			{
				game->ROW(place) = row;
				game->COL(place) = col;
				return ;
			}
			col++;
		}
		row++;
	}
	game->ROW(place) = -1;
	game->COL(place) = -1;
}
			
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   playgame.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/16 11:29:52 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 18:00:37 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../filler.h"
#include <fcntl.h>
#include <unistd.h>
/* 
** 0 is none intial
** 1 is map intial
** 2 is heatmap
** 3 is both
*/

int	play_game(int fd)
{
	int		line_num;
	char	*line;
	static t_fill	*game;
	int		piece_row;

	if (!game)
	{
		game = (t_fill *)malloc(sizeof(t_fill));
		game->initial = 0;
	}
//	printf("starting\n");
	int loopcount = 0;
	int ret;
	int fd2 = open("game2.txt", O_RDONLY);
//	printf("gnl ret |%i| string |%s| \n", get_next_line(fd, &line), line);
	while ((ret = get_next_line(fd, &line)) == 1)
	{
		write( fd2, line, ft_strlen(line));
//		printf("gnl ret |%i| string |%s| \n",ret,line);
//		printf("game address %p\n", game);
//		printf("str res %i\n", ft_strncmp(line, "Plateau", 7));
		if (line[0] == '$') //initialize player symbol
		{
//			printf("1\n");
			game->sym = (line[10] == '1' ? 'O' : 'X');
			game->op_sym[0] = (line[10] == '2' ? 'O' : 'X');
			game->op_sym[1] = ft_tolower(game->op_sym[0]);

		}
		else if (ft_strncmp(line, "Plateau", 7) == 0) //get board size
		{
//			printf("2\n");
			game->ROW(m_size) = ft_atoi(&line[8]);
			game->COL(m_size) = ft_atoi(&line[8 + ft_nextdig(&line[8])]);
		}
		else if (ft_strncmp(line, "Piece", 5) == 0) // get piece size
		{
//			printf("3\n");
			game->ROW(p_size) = ft_atoi(&line[6]);
			game->COL(p_size) = ft_atoi(&line[6 + ft_nextdig(&line[6])]);
		}
		else if (ft_isdigit(line[0])) //get board
		{
//			printf("4\n");
			if (game->initial < 1)
			{
		//		printf("initialize map :%i:", game->initial);
				gen_map(game);
				game->initial++;
			}
		//	printf("row num for map |%i| line |%s|\n",ft_atoi(line),line + 4);
			game->map[ft_atoi(line)] = (line + 4);
		}
		else if (line[0] == '*' || line[0] == '.') //get actual piece
		{
			//-----add piece trim-----return negative-----//
			//wrap around is possible
//			printf("5\n");
			get_piece(game, line, fd);
//			printf("got piece\n");
		//	printstate(game);
			decide(game);
//			printf("decided\n");
			place_piece(game);
			printstate(game);
		}
	//	if (game->place[0] == -1)
	//		return (-1);
	//	else
	//		return (1);
	}
	close(fd2);
//	printf("realbad");
	return (0);
}



/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   printstate.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/19 13:58:04 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 14:52:43 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../filler.h"
#include <stdio.h>

void printstate(t_fill *game)
{
	int i = 0;
	printf("\n----------PRINTING GAME STATE---------\n");
	printf("\nMap:\n");
	while (i < game->ROW(m_size))
		printf("%s\n", game->map[i++]);
	
	i = 0;
	printf("\nPiece:\n");
	while (i < game->ROW(p_size))
		printf("%s\n", game->piece[i++]);

	printf("\nMy Symbol:\n");
	printf("%c\n", game->sym);

	printf("\nOpp Symbol:\n");
	printf("%c|%c\n", game->op_sym[0], game->op_sym[1]);

	printf("\nMapsize:\n");
	printf("Row:%i Col:%i\n", game->ROW(m_size), game->COL(m_size));
	
	printf("\nPiece size:\n");
	printf("Row:%i Col:%i\n", game->ROW(p_size), game->COL(p_size));

	printf("\nHeat map:\n");
	printf("none for now\n");

	printf("\nPlacement location:\n");
	printf("Row:%i Col:%i\n", game->ROW(place), game->COL(place));
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fil_valid_move.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhohls <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/14 07:23:46 by rhohls            #+#    #+#             */
/*   Updated: 2018/06/19 07:37:32 by rhohls           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "filler.h"
int valid_move_static(t_fill *game, int rowin, int colin)
{
	//over map edge
	if ((rowin + game->ROW(p_size) + 1) > game->ROW(m_size))
		return (0);
	else if ((colin + game->COL(p_size) + 1) > game->COL(m_size))
		return (0);
	
	//only 1 piece overlap
	int row;
	int col;
	int valid;

	row = 0;
	valid = 2;

	while (row < game->ROW(p_size))
	{
		col = 0;
		while (col < game->COL(p_size))
		{
			//if cover a oppnent piece kill
			if (game->map[rowin + row][colin + col] == game->op_sym[0]
			|| game->map[rowin + row][colin + col] == game->op_sym[1])
				return (0);
			//if cover 1 pice reduce valid by 1
			if (game->map[rowin + row][colin + col] == game->sym)
				valid--;
			if (valid < 1)
				return (0);
			col++;
		}
		row++;
	}

	if (valid == 1)
		return (1);
	else
		return (0);
}
int valid_move(t_fill *game, int *pos)
{
	//over map edge
	if ((ROW(pos) + game->ROW(p_size) + 1) > game->ROW(m_size))
		return (0);
	else if ((COL(pos) + game->COL(p_size) + 1) > game->COL(m_size))
		return (0);
	
	//only 1 piece overlap
	int row;
	int col;
	int valid;

	row = 0;
	valid = 2;

	while (row < game->ROW(p_size))
	{
		col = 0;
		while (col < game->COL(p_size))
		{
			//if cover a oppnent piece kill
			if (game->map[ROW(pos) + row][COL(pos) + col] == game->op_sym[0]
			|| game->map[ROW(pos) + row][COL(pos) + col] == game->op_sym[1])
				return (0);
			//if cover 1 pice reduce valid by 1
			if (game->map[ROW(pos) + row][COL(pos) + col] == game->sym)
				valid--;
			if (valid < 1)
				return (0);
			col++;
		}
		row++;
	}

	if (valid == 1)
		return (1);
	else
		return (0);
}
